{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["ALL_PLATFORM","data","App","useState","tableData","setTableData","searchString","setSearchString","dropdownOpen","setDropdownOpen","platforms","setPlatform","selectedPlatform","setSelectedPlatform","narrowDown","title","platform","narrowDownArray","t","p","filter","d","includes","dropdownChanged","e","selected","currentTarget","innerText","className","InputGroup","Input","type","placeholder","value","onChange","text","target","Dropdown","id","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","onClick","map","Button","color","Table","sort","a","b","genre","Label","for","file","files","item","reader","FileReader","onload","s","result","toString","replaceAll","split","a2","v","i","g","undefined","Array","from","sortedPList","Set","readAsText","sortData","str","JSON","stringify","blob","Blob","url","URL","createObjectURL","document","createElement","body","appendChild","download","href","click","remove","revokeObjectURL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","err","console","error","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d2ca9963.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport {\r\n  Table,\r\n  Button,\r\n  InputGroup,\r\n  Label,\r\n  Input,\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"reactstrap\";\r\nimport \"./App.css\";\r\n\r\ntype gameType = {\r\n  id: number;\r\n  title: string;\r\n  platform: string;\r\n  genre?: string;\r\n};\r\n\r\nconst ALL_PLATFORM = \"すべて\";\r\n\r\nlet data: gameType[] = [];\r\n\r\n// eslint-disable-next-line arrow-body-style\r\nconst App: React.FC = () => {\r\n  const [tableData, setTableData] = useState<gameType[]>([]);\r\n  const [searchString, setSearchString] = useState<string>(\"\");\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [platforms, setPlatform] = useState<string[]>();\r\n  const [selectedPlatform, setSelectedPlatform] = useState<string>(\r\n    ALL_PLATFORM,\r\n  );\r\n\r\n  const toggle = () => setDropdownOpen((prevState) => !prevState);\r\n\r\n  const importJson = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e?.target?.files?.item(0);\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const s = reader.result?.toString();\r\n        const a = s?.replaceAll(\"\\r\\n\", \"\\n\").split(\"\\n\");\r\n        const a2 = a?.map((v, i) => {\r\n          const g = v.split(\"\\t\");\r\n          const game: gameType = { id: i, title: g[1], platform: g[0] };\r\n          return game;\r\n        });\r\n        if (a2 !== undefined) {\r\n          setTableData(a2);\r\n          data = Array.from(a2);\r\n          const plist = Array.from(new Set(a2.map((g) => g.platform)));\r\n          const sortedPList = plist.sort();\r\n          setPlatform(sortedPList);\r\n        }\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n  const exportJson = () => {\r\n    const sortData = tableData\r\n      .sort((a, b) => {\r\n        if (a.id < b.id) {\r\n          return -1;\r\n        }\r\n        if (a.id > b.id) {\r\n          return 1;\r\n        }\r\n\r\n        return 0;\r\n      })\r\n      .filter((d) => d);\r\n    const str = JSON.stringify(sortData);\r\n    const blob = new Blob([str], { type: \"text/plain\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.download = \"games.json\";\r\n    a.href = url;\r\n    a.click();\r\n    a.remove();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n  const clear = () => {\r\n    setTableData(data);\r\n    setSearchString(\"\");\r\n    setSelectedPlatform(ALL_PLATFORM);\r\n  };\r\n\r\n  const sortTitle = () =>\r\n    setTableData(\r\n      tableData\r\n        .sort((a, b) => {\r\n          if (a.title < b.title) {\r\n            return -1;\r\n          }\r\n          if (a.title > b.title) {\r\n            return 1;\r\n          }\r\n\r\n          return 0;\r\n        })\r\n        .filter((d) => d),\r\n    );\r\n\r\n  const narrowDown = (title?: string, platform?: string) => {\r\n    let narrowDownArray = data;\r\n    const t = title ? title : searchString;\r\n    const p = platform ? platform : selectedPlatform;\r\n    narrowDownArray = narrowDownArray.filter((d) => d.title.includes(t));\r\n    if (p !== ALL_PLATFORM) {\r\n      narrowDownArray = narrowDownArray.filter((d) => d.platform === p);\r\n    }\r\n\r\n    return narrowDownArray;\r\n  };\r\n  const textChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const text = e.target.value;\r\n    setSearchString(text);\r\n    setTableData(narrowDown(text, selectedPlatform));\r\n  };\r\n\r\n  const dropdownChanged = (e: React.FormEvent<HTMLElement>) => {\r\n    const selected = e.currentTarget.innerText;\r\n    setSelectedPlatform(selected);\r\n    setTableData(narrowDown(searchString, selected));\r\n  };\r\n  // useEffect(() => {\r\n  //   setTableData(data);\r\n  // }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <InputGroup>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"ゲームタイトル\"\r\n              value={searchString}\r\n              onChange={textChanged}\r\n            />\r\n            <Dropdown id=\"platforms\" isOpen={dropdownOpen} toggle={toggle}>\r\n              <DropdownToggle caret>{selectedPlatform}</DropdownToggle>\r\n              <DropdownMenu>\r\n                <DropdownItem onClick={dropdownChanged} key=\"all\">\r\n                  {ALL_PLATFORM}\r\n                </DropdownItem>\r\n                {platforms?.map((p) => (\r\n                  <DropdownItem onClick={dropdownChanged} key={p}>\r\n                    {p}\r\n                  </DropdownItem>\r\n                ))}\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          </InputGroup>\r\n          <div className=\"text-right\">\r\n            <Button color=\"secondary\" onClick={clear} className=\"m-1\">\r\n              クリア\r\n            </Button>\r\n          </div>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <th onClick={sortTitle}>タイトル</th>\r\n                <th>プラットフォーム</th>\r\n                <th>ジャンル</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {tableData?.map((d) => (\r\n                <tr key={d.id}>\r\n                  <td>{d.title}</td>\r\n                  <td>{d.platform}</td>\r\n                  <td>{d.genre}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <InputGroup>\r\n            <Label for=\"importJson\">Jsonファイルをインポート</Label>\r\n            <Input type=\"file\" id=\"importJson\" onChange={importJson} />\r\n          </InputGroup>\r\n          <div className=\"text-left\">\r\n            <Button color=\"secondary\" onClick={exportJson} className=\"mt-2\">\r\n              Jsonファイルをエクスポート\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals')\r\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      })\r\n      .catch((err) => console.error(err)); // eslint-disable-line no-console\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}