{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["ALL_PLATFORM","data","App","useState","tableData","setTableData","searchString","setSearchString","platforms","setPlatform","selectedPlatform","setSelectedPlatform","useEffect","games","localStorage","getItem","gamesJson","JSON","parse","sort","sortFunc","Array","from","Set","map","v","platform","a","b","title","narrowDown","narrowDownArray","p","filter","d","toUpperCase","includes","className","InputGroup","Input","type","placeholder","value","onChange","e","text","target","id","selected","Button","color","onClick","document","getElementById","selectedIndex","Table","Label","for","file","files","item","reader","FileReader","onload","jsonStr","result","toString","g","clear","setItem","stringify","readAsText","sortData","str","blob","Blob","url","URL","createObjectURL","createElement","body","appendChild","download","href","click","remove","revokeObjectURL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","err","console","error","ReactDOM","render","StrictMode"],"mappings":"sOAqBMA,EAAe,qBAEjBC,EAAoB,GA6NTC,EA1NO,WAAO,IAAD,EACQC,mBAAsB,IAD9B,mBACnBC,EADmB,KACRC,EADQ,OAEcF,mBAAiB,IAF/B,mBAEnBG,EAFmB,KAELC,EAFK,OAIOJ,qBAJP,mBAInBK,EAJmB,KAIRC,EAJQ,OAKsBN,mBAC9CH,GANwB,mBAKnBU,EALmB,KAKDC,EALC,KAS1BC,qBAAU,WACR,IAAMC,EAAQC,aAAaC,QAAQ,SACnC,GAAIF,EAAO,CACT,IAAMG,EAAaC,KAAKC,MAAML,GAAuBM,KAAKC,GAC1DnB,EAAOoB,MAAMC,KAAKN,GAClBX,EAAaW,GACbP,EAAYY,MAAMC,KAAK,IAAIC,IAAIP,EAAUQ,KAAI,SAACC,GAAD,OAAOA,EAAEC,kBAEvD,IAGH,IAAMN,EAAW,SAACO,EAAcC,GAC9B,OAAID,EAAED,SAAWE,EAAEF,UACT,EAENC,EAAED,SAAWE,EAAEF,SACV,EAELC,EAAEE,MAAQD,EAAEC,OACN,EAENF,EAAEE,MAAQD,EAAEC,MACP,EAEF,GA0EHC,EAAa,SAACD,EAAgBH,GAClC,IAAIK,EAAkB9B,EAChB+B,EAAIN,GAAsBhB,EAUhC,OATImB,IACFE,EAAkBA,EAAgBE,QAAO,SAACC,GAAD,OACvCA,EAAEL,MAAMM,cAAcC,SAASP,EAAMM,mBAGrCH,IAAMhC,IACR+B,EAAkBA,EAAgBE,QAAO,SAACC,GAAD,OAAOA,EAAER,WAAaM,MAG1DD,GAoBT,OACE,sBAAKM,UAAU,MAAf,UACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,6CACZC,MAAOpC,EACPqC,SA3Ba,SAACC,GACxB,IAAMC,EAAOD,EAAEE,OAAOJ,MACtBnC,EAAgBsC,GAChBxC,EAAayB,EAAWe,EAAMnC,OAuCtB,yBACEqC,GAAG,iBACHV,UAAU,cACVM,SAjCU,SAACC,GACrB,IAAMI,EAAWJ,EAAEE,OAAOJ,MAC1B/B,EAAoBqC,GACpB3C,EAAayB,EAAWxB,EAAc0C,KA2B9B,UAKE,wBAAQA,UAAQ,EAAoBN,MAAO1C,EAA3C,SACGA,GADmBA,GALxB,OAQGQ,QARH,IAQGA,OARH,EAQGA,EAAWgB,KAAI,SAACQ,GAAD,OACd,wBAAgBU,MAAOV,EAAvB,SACGA,GADUA,YAMnB,qBAAKK,UAAU,aAAf,SACE,cAACY,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAlGtB,WACZ9C,EAAaJ,GACbM,EAAgB,IAChBI,EAAoBX,GACFoD,SAASC,eACzB,kBAEQC,cAAgB,GA2FwBjB,UAAU,MAApD,kCAIF,eAACkB,EAAA,EAAD,WACE,gCACE,+BACE,kFACA,oBAAIJ,QAhGA,kBAChB9C,EACED,EACGe,MAAK,SAACQ,EAAGC,GACR,OAAID,EAAEE,MAAQD,EAAEC,OACN,EAENF,EAAEE,MAAQD,EAAEC,MACP,EAGF,KAERI,QAAO,SAACC,GAAD,OAAOA,OAmFP,2CAGJ,uCACG9B,QADH,IACGA,OADH,EACGA,EAAWoB,KAAI,SAACU,GAAD,OACd,+BACE,6BAAKA,EAAER,WACP,6BAAKQ,EAAEL,UAFAK,EAAEa,iBASrB,qBAAKV,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,eAACC,EAAA,EAAD,WACE,cAACkB,EAAA,EAAD,CAAOC,IAAI,aAAX,8EACA,cAAClB,EAAA,EAAD,CAAOC,KAAK,OAAOO,GAAG,aAAaJ,SAzK1B,SAACC,GAA4C,IAAD,IACvDc,EAAI,OAAGd,QAAH,IAAGA,GAAH,UAAGA,EAAGE,cAAN,iBAAG,EAAWa,aAAd,aAAG,EAAkBC,KAAK,GACpC,GAAIF,EAAM,CACR,IAAMG,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WAAO,IAAD,EACdC,EAAO,UAAGH,EAAOI,cAAV,aAAG,EAAeC,WAC/B,GAAIF,EAAS,CACX,IAAIjB,EAAK,EACHlC,EAASI,KAAKC,MAAM8C,GACvB7C,KAAKC,GACLI,KAAI,SAAC2C,GAEJ,OADAA,EAAEpB,GAAKA,IACAoB,KAEXlE,EAAOoB,MAAMC,KAAKT,GAClBR,EAAaQ,GACbJ,EAAYY,MAAMC,KAAK,IAAIC,IAAIV,EAAMW,KAAI,SAACC,GAAD,OAAOA,EAAEC,eAElDZ,aAAasD,QACbtD,aAAauD,QAAQ,QAASpD,KAAKqD,UAAUzD,MAGjDgD,EAAOU,WAAWb,UAqJd,qBAAKrB,UAAU,YAAf,SACE,cAACY,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAnJjB,WACjB,IAAIJ,EAAK,EACHyB,EAAWvE,EACdkB,KAAKC,GACLI,KAAI,SAAC2C,GAEJ,OADAA,EAAEpB,GAAKA,IACAoB,KAERlC,QAAO,SAACC,GAAD,OAAOA,KACXuC,EAAMxD,KAAKqD,UAAUE,GACrBE,EAAO,IAAIC,KAAK,CAACF,GAAM,CAAEjC,KAAM,eAC/BoC,EAAMC,IAAIC,gBAAgBJ,GAC1B/C,EAAIyB,SAAS2B,cAAc,KACjC3B,SAAS4B,KAAKC,YAAYtD,GAC1BA,EAAEuD,SAAW,aACbvD,EAAEwD,KAAOP,EACTjD,EAAEyD,QACFzD,EAAE0D,SACFR,IAAIS,gBAAgBV,IAiImCvC,UAAU,OAAzD,+FC1NGkD,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BACGC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACvCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MAETQ,OAAM,SAACC,GAAD,OAASC,QAAQC,MAAMF,O,MCNpCG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlD,SAASC,eAAe,SAM1BkC,M","file":"static/js/main.3a478c05.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Table,\r\n  Button,\r\n  InputGroup,\r\n  Label,\r\n  Input,\r\n  // Dropdown,\r\n  // DropdownToggle,\r\n  // DropdownMenu,\r\n  // DropdownItem,\r\n} from \"reactstrap\";\r\nimport \"./App.css\";\r\n\r\ntype gameTitle = {\r\n  id: number;\r\n  title: string;\r\n  platform: string;\r\n};\r\n\r\nconst ALL_PLATFORM = \"すべて\";\r\n\r\nlet data: gameTitle[] = [];\r\n\r\n// eslint-disable-next-line arrow-body-style\r\nconst App: React.FC = () => {\r\n  const [tableData, setTableData] = useState<gameTitle[]>([]);\r\n  const [searchString, setSearchString] = useState<string>(\"\");\r\n  // const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [platforms, setPlatform] = useState<string[]>();\r\n  const [selectedPlatform, setSelectedPlatform] = useState<string>(\r\n    ALL_PLATFORM,\r\n  );\r\n\r\n  useEffect(() => {\r\n    const games = localStorage.getItem(\"games\");\r\n    if (games) {\r\n      const gamesJson = (JSON.parse(games) as gameTitle[]).sort(sortFunc);\r\n      data = Array.from(gamesJson);\r\n      setTableData(gamesJson);\r\n      setPlatform(Array.from(new Set(gamesJson.map((v) => v.platform))));\r\n    }\r\n  }, []);\r\n  // const toggle = () => setDropdownOpen((prevState) => !prevState);\r\n\r\n  const sortFunc = (a: gameTitle, b: gameTitle) => {\r\n    if (a.platform < b.platform) {\r\n      return -1;\r\n    }\r\n    if (a.platform > b.platform) {\r\n      return 1;\r\n    }\r\n    if (a.title < b.title) {\r\n      return -1;\r\n    }\r\n    if (a.title > b.title) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const importJson = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e?.target?.files?.item(0);\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const jsonStr = reader.result?.toString();\r\n        if (jsonStr) {\r\n          let id = 0;\r\n          const games = (JSON.parse(jsonStr) as gameTitle[])\r\n            .sort(sortFunc)\r\n            .map((g) => {\r\n              g.id = id++;\r\n              return g;\r\n            });\r\n          data = Array.from(games);\r\n          setTableData(games);\r\n          setPlatform(Array.from(new Set(games.map((v) => v.platform))));\r\n\r\n          localStorage.clear();\r\n          localStorage.setItem(\"games\", JSON.stringify(games));\r\n        }\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n  const exportJson = () => {\r\n    let id = 0;\r\n    const sortData = data\r\n      .sort(sortFunc)\r\n      .map((g) => {\r\n        g.id = id++;\r\n        return g;\r\n      })\r\n      .filter((d) => d);\r\n    const str = JSON.stringify(sortData);\r\n    const blob = new Blob([str], { type: \"text/plain\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.download = \"games.json\";\r\n    a.href = url;\r\n    a.click();\r\n    a.remove();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n  const clear = () => {\r\n    setTableData(data);\r\n    setSearchString(\"\");\r\n    setSelectedPlatform(ALL_PLATFORM);\r\n    const selectObj = document.getElementById(\r\n      \"selectPlatform\",\r\n    ) as HTMLSelectElement;\r\n    selectObj.selectedIndex = 0;\r\n  };\r\n\r\n  const sortTitle = () =>\r\n    setTableData(\r\n      tableData\r\n        .sort((a, b) => {\r\n          if (a.title < b.title) {\r\n            return -1;\r\n          }\r\n          if (a.title > b.title) {\r\n            return 1;\r\n          }\r\n\r\n          return 0;\r\n        })\r\n        .filter((d) => d),\r\n    );\r\n\r\n  const narrowDown = (title?: string, platform?: string) => {\r\n    let narrowDownArray = data;\r\n    const p = platform ? platform : selectedPlatform;\r\n    if (title) {\r\n      narrowDownArray = narrowDownArray.filter((d) =>\r\n        d.title.toUpperCase().includes(title.toUpperCase()),\r\n      );\r\n    }\r\n    if (p !== ALL_PLATFORM) {\r\n      narrowDownArray = narrowDownArray.filter((d) => d.platform === p);\r\n    }\r\n\r\n    return narrowDownArray;\r\n  };\r\n  const gameTitleChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const text = e.target.value;\r\n    setSearchString(text);\r\n    setTableData(narrowDown(text, selectedPlatform));\r\n  };\r\n\r\n  // const dropdownChanged = (e: React.FormEvent<HTMLElement>) => {\r\n  //   const selected = e.currentTarget.innerText;\r\n  //   setSelectedPlatform(selected);\r\n  //   setTableData(narrowDown(searchString, selected));\r\n  // };\r\n\r\n  const selectChanged = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const selected = e.target.value;\r\n    setSelectedPlatform(selected);\r\n    setTableData(narrowDown(searchString, selected));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <InputGroup>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"ゲームタイトル\"\r\n              value={searchString}\r\n              onChange={gameTitleChanged}\r\n            />\r\n            {/* <Dropdown id=\"platforms\" isOpen={dropdownOpen} toggle={toggle}>\r\n              <DropdownToggle caret>{selectedPlatform}</DropdownToggle>\r\n              <DropdownMenu>\r\n                <DropdownItem onClick={dropdownChanged} key=\"all\">\r\n                  {ALL_PLATFORM}\r\n                </DropdownItem>\r\n                {platforms?.map((p) => (\r\n                  <DropdownItem onClick={dropdownChanged} key={p}>\r\n                    {p}\r\n                  </DropdownItem>\r\n                ))}\r\n              </DropdownMenu>\r\n            </Dropdown> */}\r\n            <select\r\n              id=\"selectPlatform\"\r\n              className=\"form-select\"\r\n              onChange={selectChanged}\r\n            >\r\n              <option selected key={ALL_PLATFORM} value={ALL_PLATFORM}>\r\n                {ALL_PLATFORM}\r\n              </option>\r\n              {platforms?.map((p) => (\r\n                <option key={p} value={p}>\r\n                  {p}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </InputGroup>\r\n          <div className=\"text-right\">\r\n            <Button color=\"secondary\" onClick={clear} className=\"m-1\">\r\n              クリア\r\n            </Button>\r\n          </div>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <th>プラットフォーム</th>\r\n                <th onClick={sortTitle}>タイトル</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {tableData?.map((d) => (\r\n                <tr key={d.id}>\r\n                  <td>{d.platform}</td>\r\n                  <td>{d.title}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <InputGroup>\r\n            <Label for=\"importJson\">Jsonファイルをインポート</Label>\r\n            <Input type=\"file\" id=\"importJson\" onChange={importJson} />\r\n          </InputGroup>\r\n          <div className=\"text-left\">\r\n            <Button color=\"secondary\" onClick={exportJson} className=\"mt-2\">\r\n              Jsonファイルをエクスポート\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals')\r\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      })\r\n      .catch((err) => console.error(err)); // eslint-disable-line no-console\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}